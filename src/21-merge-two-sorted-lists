/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        
        //1, 3, 3, 6, 7, 8
        //2,4,4,5
        /*
        traverse both together, while(l1!null and l2!=null)
        n1<=n2, n1 value add to output list and n1++
        else, n2 value add to output and n2++  

        when one dies, the other appends itsef to the output
        if(l1==null)
            out append l2
        similarly for l2    
        */

        //traversin both together
        //ListNode dummy=new ListNode(15);
        //list2.next=dummy;
        ListNode l1=list1;
        ListNode l2=list2;
        if(l1==null){
            return l2;
        }
        if(l2==null){
            return l1;
        }
        ListNode l3=new ListNode(0);
        ListNode dummy=new ListNode(0);
        ListNode curr=dummy;
        dummy.next=l3;
        while(l1!=null && l2!=null){
            if(l1.val<=l2.val){
                curr.next=l1;
                l1=l1.next;
            }
            else{
                curr.next=l2;
                l2=l2.next;
            }
            curr=curr.next;
        }

        if(l1!=null){
            curr.next=l1;
        }
        
        if(l2!=null){
            curr.next=l2;
        }
return dummy.next;

        }
}
