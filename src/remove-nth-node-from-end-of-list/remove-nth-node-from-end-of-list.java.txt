/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        /*
        1,2,5,6,7,10 n=3
        diff p1 and p2 is 3, so when p2 reaches end, node.next==null p2 reaches 4th last node and 3th last can be removed
        m1: create diff(n)
        m2: delete the next node to p2
        return head
        */
        ListNode dummy=new ListNode(0);
        dummy.next=head;

        //defining p1 and p2
        ListNode p1=dummy;
        ListNode p2=dummy;
  
        //creating diff of n
        int diff=n;
        while(p2!=null && diff>0){
            p2=p2.next;
            diff--;
        }
        if(p2!=null)
            System.out.println("p2 stayed at: "+p2.val+" and created a diff of "+n);

        while(p2!=null && p2.next!=null){
            p1=p1.next;
            p2=p2.next;

        }
        if(p1!=null)
            System.out.println("after moving both until p2 reaches the last ele, p1 stays at: "+p1.val);

        //now to delete the nth last element and when p1 has reached n-1th last position, simple do p1.next=p1.next.next
        if(p1!=null && p1.next!=null){ //p1.next!=null in case of node.size > 1 
            p1.next=p1.next.next;
        }
        
        
return dummy.next;
    }
}